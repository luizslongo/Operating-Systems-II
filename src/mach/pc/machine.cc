// EPOS-- PC Mediator Implementation

#include <mach/pc/machine.h>

__BEGIN_SYS

// Class attributes
volatile unsigned int PC::_n_cpus;

// Class methods
void PC::panic()
{
    CPU::int_disable(); 
    Display::position(24, 73);
    Display::puts("PANIC!");
    CPU::halt();
}


// This procedure delays for count * 30 microseconds before returning.
// It does this by counting the cycles of the memory refresh request
// toggle at bit 4 of I/O port 61h. The requests are generated by PIT
// channel 1, normally programmed by the BIOS to generate an output
// once every 18/1193182 = 15.09 microseconds. Since each request
// toggles the bit, one full cycle takes ~30 microseconds, but note
// that the first loop could take as little as 15 microseconds,
// depending on the state of the toggle when the loop is entered.
static void delay(int count)
{
    for(; count > 0; count--) {
	while(!(CPU::in8(0x61) & 0x10));
	while((CPU::in8(0x61) & 0x10));
    }
}

void PC::reboot()
{
    for(int i = 0; (i < 10000) && (CPU::in8(0x64) & 0x02); i++)
	delay(1);

    // Sending 0xfe to the keyboard controller port causes it to pulse
    // the reset line
    CPU::out8(0x64, 0xfe);

    for(int i = 0; (i < 10000) && (CPU::in8(0x64) & 0x02); i++)
	delay(1);
}

__END_SYS
