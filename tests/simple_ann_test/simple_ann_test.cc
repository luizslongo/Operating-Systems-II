#include <utility/ostream.h>
#include <utility/fann.h>
#include <time.h>
#include <process.h>
#include <machine.h>

using namespace EPOS;

OStream cout;

FANN_EPOS::fann_type inputs[][8] = {
    {7.844921590008708e-06, 0.000650648967959988, 0.12453557306040851, 0.12704315366777896, 0.12279732660439896, 0.11792520821568342, 0.242822, 1.0},
    {0.0, 0.000980917593033903, 0.2544918179132064, 0.2899440076918727, 0.2892912756498656, 0.24035287078977816, 0.246144, 1.0},
    {3.922460795004354e-06, 0.0010857333842250257, 0.23480357333702148, 0.24558848481420736, 0.2542590807891945, 0.22180400279595452, 0.245432, 1.0},
    {0.0, 0.0009294985256571257, 0.16339812783292573, 0.1598467281262372, 0.16859538634042298, 0.15453671269987324, 0.243734, 1.0},
    {0.0, 0.0007337105383378588, 0.14417666769348764, 0.14696566936259262, 0.14301722922165958, 0.1364276744213598, 0.243216, 1.0},
    {0.0, 0.0010184930653477015, 0.19468368674835132, 0.18296476443640067, 0.19690311593091087, 0.18400826544192272, 0.244322, 1.0},
    {0.0, 0.0, 0.5990431704879076, 5.655788699734178e-05, 0.5721769299926754, 0.6183990988180379, 0.693538, 0.16666666666666666},
    {0.0, 0.0, 0.5780787341183274, 9.897630224534812e-05, 0.5462607396157634, 0.5884857418165016, 0.693636, 0.16666666666666666},
    {0.0, 0.0, 0.5089301992242262, 0.00011311577399468356, 0.46903011185850674, 0.5051846593713841, 0.692814, 0.16666666666666666},
    {0.0, 0.0, 0.49470034639491534, 0.00016967366099202531, 0.4574121249697392, 0.4963579532664884, 0.693328, 0.16666666666666666},
    {0.11184896956954916, 0.1776588107560778, 0.3623567427561971, 0.1108958769300379, 0.3806256162675615, 0.35466565043459714, 0.450134, 1.0},
    {0.10291360387852923, 0.20411985389074241, 0.32685912225665914, 0.11995927832136193, 0.33872273203272374, 0.3290716088191041, 0.4513, 1.0},
    {0.08876921025174354, 0.1408229819499297, 0.26702427279071084, 0.07706012103387817, 0.2876908549266672, 0.2771993460309687, 0.450308, 1.0},
    {0.09120113594464624, 0.12836770170612422, 0.265817234247204, 0.08352185962332448, 0.28030599300118647, 0.2753699308514629, 0.452124, 1.0},
    {0.23351978096978923, 0.2627751661725822, 0.7349403081720282, 0.19431876025111702, 0.7467953248844014, 0.746099781615414, 0.574306, 0.5},
    {0.23146048905241193, 0.08557319405358262, 0.7019714962877278, 0.21511792319438947, 0.7115644495936186, 0.7120166809492029, 0.573376, 0.5},
    {0.19758611762675432, 0.10208069233796566, 0.6164886494370296, 0.1899213845370737, 0.630833996090244, 0.6403979891242108, 0.573274, 0.5},
    {0.1844929434930298, 0.08518359573538165, 0.6086696172053285, 0.18989310559357503, 0.627970601329659, 0.6330605829644227, 0.573168, 0.5},
    {0.1097269182794518, 0.023164289853238117, 0.40735193346200027, 0.11694757083875346, 0.4057449062267754, 0.4136117177349609, 0.716358, 0.16666666666666666},
    {0.1374704834825176, 0.04161384675931328, 0.4224414869206058, 0.1174848707652282, 0.41750886583138214, 0.4321936593437405, 0.71477, 0.16666666666666666},
    {0.1408084976190663, 0.049920003797100355, 0.38398442165879787, 0.11602850517504666, 0.38919225385979267, 0.39020053470656296, 0.71581, 0.16666666666666666},
    {0.15228954036604403, 0.024372637936592376, 0.4403128870224497, 0.1311718794185849, 0.44261215074540367, 0.45904449832756106, 0.715626, 0.16666666666666666},
    {0.12577762785260962, 0.02487496267173474, 0.41159857167105685, 0.12708557208302698, 0.40854168312909867, 0.4188580816118599, 0.716448, 0.16666666666666666},
    {1.176738238501306e-05, 0.0051201525168644655, 0.5900799663035072, 0.4653158757988802, 0.4289244852639203, 0.5564951643413117, 0.249132, 0.3333333333333333},
    {0.0, 0.0, 0.8020613955125827, 9.897630224534812e-05, 0.7456190797568274, 0.8142906647500425, 0.54443, 0.5},
    {0.0, 0.0, 0.6792216487392105, 0.000127255245744019, 0.6258102554128687, 0.6739993010113615, 0.608116, 0.3333333333333333}
};

FANN_EPOS::fann_type outs[] = {
    {0.2422},
    {0.2422},
    {0.2422},
    {0.2422},
    {0.2422},
    {0.2422},
    {0.7456},
    {0.7456},
    {0.7456},
    {0.7456},
    {0.4856},
    {0.4856},
    {0.4856},
    {0.4856},
    {0.6376},
    {0.6376},
    {0.6376},
    {0.6376},
    {0.831},
    {0.831},
    {0.831},
    {0.831},
    {0.831},
    {0.2768},
    {0.6096},
    {0.6936}
};

int time_evaluation() {
    for (int count_dvfs = 0; count_dvfs < 8; ++count_dvfs)
    {
        struct FANN_EPOS::fann *ann = FANN_EPOS::fann_create_from_config();
        FANN_EPOS::fann_type * out[26];
        TSC::Time_Stamp t0 = TSC::time_stamp();
        for (int j = 0; j < 100000; ++j)
        {
            for (int i = 0; i < 26; ++i)
            {
                out[i] = FANN_EPOS::fann_run(ann, inputs[i], false);
                //cout << "out["<< i <<"] = " << out[i][0] << ",expected=" << outs[i] << endl;
            }
        }
        TSC::Time_Stamp t1 = TSC::time_stamp();
        cout << "ANN Run * 100000 * 26: " << t1 - t0 << ", per iteration = " << ((t1 - t0)*1.0)/(100000.*26) << endl;
        //cout << "========== LEARNING ===========" << endl;
        //FANN_EPOS::fann_type desired_output[] = {1,-1,-1};
        //FANN_EPOS::fann_type **inputs_2 = new float*[25];
        //for (int i = 0; i < 25; ++i)
        //{
        //    inputs_2[i] = new float[9];
        //    inputs_2[i] = inputs[i];
        //}
        //    FANN_EPOS::fann_train_data(ann, inputs_2, 10, desired_output, true);
            //FANN_EPOS::fann_set_train_in_out(ann, inputs[i], out[i]);
            //FANN_EPOS::fann_learn_last_run(ann, outs[i]);
            //out[i] = FANN_EPOS::fann_run(ann, inputs[i]);
            //cout << "out["<< i <<"] = " << out[i][0] <<"," << out[i][1]<<"," << out[i][2]<<endl;
        //}
        t0 = TSC::time_stamp();
        float error = 0;
        bool end = false;
        for (int j = 0; j < 100000; ++j)
        {
            for (unsigned int i = 0; i < 26; ++i)
            {
                //end = false;
                //while(!end) {
                    //end = true;
                    FANN_EPOS::fann_train_data_incremental(ann, inputs[i], &outs[i]);
                    //cout << "train["<< 25 <<"] error = " << error << endl;
                    //end &= error <= 0.01;
                //}
            }
        }
        t1 = TSC::time_stamp();
        cout << "ANN Train * 100000 * 26: " << t1 - t0 << ", per iteration = " << ((t1 - t0)*1.0)/(100000.*26) << endl;
        cout << "----------------------------------------" << endl;
        cout << "clock from[" << CPU::id() <<"]: " << Machine::clock(1200000000 - (count_dvfs % 7)*100000000) << endl;
        cout << "clock to: " << Machine::clock() << endl;
    }
    return 0;
}

int main()
{
    cout << "Hello world!" << endl;

    cout << "clock["<< CPU::id() <<"]" << Machine::clock() << endl;
    Hertz new_clock = 1200000000;
    cout << "    clock change to" << new_clock << "Hz" << endl;
    cout << "    clock now is = " << Machine::clock(new_clock) << endl;

    Thread * t = new Thread(Thread::Configuration(Thread::READY, Thread::Criterion(Thread::NORMAL, 1)), &time_evaluation);

    t->join();

    //for (int i = 0; i < 26; ++i)
    //{
    //    out[i] = FANN_EPOS::fann_run(ann, inputs[i], false);
    //    cout << "out["<< i <<"] = " << out[i][0] << ",expected=" << outs[i] << endl;
    //}

    return 0;
}
