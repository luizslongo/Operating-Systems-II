'''This module is responsible for handling http connections from a client

This module supports running a server (based on tornado+flask) for handling
connections from clients interested in communicating with the wireless
sensor network, such as a SCADA component.
'''

import struct

from flask import Flask, request
from tornado.wsgi import WSGIContainer
from tornado.httpserver import HTTPServer
from tornado.ioloop import IOLoop

from gateway_daemon.modbus import WRITE_HOLDING_REGISTER, WRITE_SINGLE_COIL, build


app = Flask(__name__)

'''def write_single_coil(number, data):
    data = int(data)
    return WRITE_SINGLE_COIL, struct.pack('!HH', number, dat 

def write_holding_register(number, data):
    data = int(float(data))
    return WRITE_HOLDING_REGISTER, struct.pack('!HH', number, data)


MODBUS_FUNCTIONS = {
    'numeric': write_holding_register
   # 'binary': write_single_coil
}


def decompose(name):
    _, address, data_type, number = name.split('_')
    return int(address, 16), data_type, int(number, 16)


def modbus_data(data_type, number, data):
    return MODBUS_FUNCTIONS[data_type](number, data)


@app.route('/network/', methods=['POST'])
def network():
    '''This function handles actuator requests for the network.'''
    print(request.values)

    for key in request.values:
        data = request.values[key]

        address, data_type, number = decompose(key)

        function, data = modbus_data(data_type, number, data)

        print(address, function, number, data)
        modbus = build(address, function, data)
        print(modbus)

    return ''


def run_server():
    '''This function starts and runs a http server. Can be run inside a thread.

    Never returns.
    '''
    http_server = HTTPServer(WSGIContainer(app))
    http_server.listen(5000)
    IOLoop.instance().start()
